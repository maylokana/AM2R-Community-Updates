<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sBeamExpl</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>isAprilFoolsGeneration = false;
// probably important..
global.waterlevel = 0;
global.watertype = 0;

//global.clear = 0; ??????
visible = 0; // hide me!
// initially triallogic will merely act as a spawn point but does more than that
alarm[0] = 1; // alarm for spawning samus
// variables
timer_started = 0;
timer = 0; // in tics

// GENERATING THE LEVEL
var consolidate = 0; // whether solid consolidation will occur
// grid for making visuals later
var grid = ds_grid_create(240,190);
// grid for consolidation later
var cnsl = ds_grid_create(240,190);
ds_grid_set_region(cnsl,0,0,239,189,-1);
// open the file yoinked from global.level_is
var file = file_text_open_read("stages/"+global.level_is);
// skip the first two strings
repeat (2){
    file_text_readln(file);
}
// get data for later
global.sta_timestamp = file_text_read_real(file);
file_text_readln(file);
global.sta_name = file_text_read_string(file);
file_text_readln(file);
global.sta_auth = file_text_read_string(file);
file_text_readln(file);
global.sta_iden = file_text_read_string(file);
file_text_readln(file);
// get a var from the last one
var fr = file_text_read_string(file);
if (fr == ""){
    var hdn = 1;
}else{
    var hdn = real(fr);
}
file_text_readln(file);

// objs
while (!file_text_eof(file)){
    split_object_string(file_text_read_string(file));
    var xx = real(s_part[0])+320;
    var yy = real(s_part[1])+320;
    var ty = real(s_part[2]);
    file_text_readln(file);
    if (isAprilFoolsGeneration){
        switch (ty){
            case 0: // normal solid
                if (!consolidate) then instance_create(xx,yy,oSolid1);
                ds_grid_set(grid,floor(xx/16),floor(yy/16),1);
                ds_grid_set(cnsl,floor(xx/16),floor(yy/16),0);
            break;
            case 1: // slope 1
                instance_create(xx,yy,oSlope1);
                ds_grid_set(grid,floor(xx/16),floor(yy/16),2);
            break;
            case 2: // slope 2
                instance_create(xx,yy,oSlope2);
                ds_grid_set(grid,floor(xx/16),floor(yy/16),3);
            break;
            case 3: // crack block
                with (instance_create(xx+9,yy,oHornoad)){
                    facing = choose(-1,1);
                    timer = irandom_range(95,110);
                }
            break;
            case 4: // beamblock
                with (instance_create(xx+9,yy,oHornoad)){
                    facing = choose(-1,1);
                    timer = irandom_range(95,110);
                }
            break;
            case 5: // bombblock
                with (instance_create(xx+9,yy,oHornoad)){
                    facing = choose(-1,1);
                    timer = irandom_range(95,110);
                }
            break;
            case 6: // missileblock
                instance_create(xx,yy,oBlockMissile);
                ds_grid_set(grid,floor(xx/16),floor(yy/16),4);
            break;
            case 7: // superblock
                instance_create(xx,yy,oBlockSMissile);
                ds_grid_set(grid,floor(xx/16),floor(yy/16),4);
            break;
            case 8: // pbombblock
                instance_create(xx,yy,oBlockPBomb);
                ds_grid_set(grid,floor(xx/16),floor(yy/16),4);
            break;
            case 9: // screwblock
                with (instance_create(xx+9,yy,oHornoad)){
                    facing = choose(-1,1);
                    timer = irandom_range(95,110);
                }
            break;
            case 10: // speedblock
                instance_create(xx,yy,oBlockSpeed);
                ds_grid_set(grid,floor(xx/16),floor(yy/16),4);
            break;
            case 25: // crack block
                with (instance_create(xx+9,yy,oHornoad)){
                    facing = choose(-1,1);
                    timer = irandom_range(95,110);
                }
            break;
            case 26: // beamblock
                with (instance_create(xx+9,yy,oHornoad)){
                    facing = choose(-1,1);
                    timer = irandom_range(95,110);
                }
            break;
            case 27: // bombblock
                with (instance_create(xx+9,yy,oHornoad)){
                    facing = choose(-1,1);
                    timer = irandom_range(95,110);
                }
            break;
            case 28: // missileblock
                with (instance_create(xx,yy,oBlockMissile)){
                    regentime = -1;
                }
                ds_grid_set(grid,floor(xx/16),floor(yy/16),4);
            break;
            case 29: // superblock
                with (instance_create(xx,yy,oBlockSMissile)){
                    regentime = -1;
                }
                ds_grid_set(grid,floor(xx/16),floor(yy/16),4);
            break;
            case 30: // pbombblock
                with (instance_create(xx,yy,oBlockPBomb)){
                    regentime = -1;
                }
                ds_grid_set(grid,floor(xx/16),floor(yy/16),4);
            break;
            case 31: // screwblock
                with (instance_create(xx+9,yy,oHornoad)){
                    facing = choose(-1,1);
                    timer = irandom_range(95,110);
                }
            break;
            case 32: // speedblock
                with instance_create(xx,yy,oBlockSpeed){
                    regentime = -1;
                }
                ds_grid_set(grid,floor(xx/16),floor(yy/16),4);
            break;
            case 11: // spawn. also for filling grid
                x = xx+8;
                y = yy+16;
                var s_x = x;
                var s_y = y-8;
            break;
            case 12: // FREEDOM
                instance_create(xx,yy,oTrialGoal);
            break;
            case 13: // spikes
                with (instance_create(xx+2,yy+2,oSpikes4)){
                    image_xscale = 0.75;
                    image_yscale = 0.75;
                }
                ds_grid_set(grid,floor(xx/16),floor(yy/16),5);
            break;
            case 40:
                instance_create(xx,yy,oTTWater);
            break;
            // items
            case 14: // spiderball
                instance_create(xx,yy+16,oTTSpider);
            break;
            case 15: // jumpball
                instance_create(xx,yy+16,oTTSpring);
            break;
            case 16: // hijump
                instance_create(xx,yy+16,oTTHijump);
            break;
            case 17: // spacejump
                instance_create(xx,yy+16,oTTSpace);
            break;
            case 18: // bombs
                instance_create(xx,yy+16,oTTBomb);
            break;
            case 19: // missile
                instance_create(xx,yy+16,oTTMissile);
            break;
            case 20: // super
                instance_create(xx,yy+16,oTTSuper);
            break;
            case 21: // power
                instance_create(xx,yy+16,oTTPower);
            break;
            case 22: // screw
                instance_create(xx,yy+16,oTTScrew);
            break;
            case 23: // speed
                instance_create(xx,yy+16,oTTBooster);
            break;
            case 34: // morph
                instance_create(xx,yy+16,oTTMorph);
            break;
            case 35: // pgrip
                instance_create(xx,yy+16,oTTPGrip);
            break;
            case 24: // heal
                instance_create(xx,yy,oTTHealField);
            break;
            case 33: // ammo
                instance_create(xx,yy,oTTAmmoField);
            break;
            case 36: // etank
                instance_create(xx,yy+16,oTTEnergy);
            break;
            case 37: // charge
                instance_create(xx,yy+16,oTTCBeam);
            break;
            case 38: // wave
                instance_create(xx,yy+16,oTTWBeam);
            break;
            case 39: // spazer
                instance_create(xx,yy+16,oTTSBeam);
            break;
            case 41: // gravity
                instance_create(xx,yy+16,oTTGravSuit);
            break;
        }
    }else{
        switch (ty){
            case 0: // normal solid
                if (!consolidate) then instance_create(xx,yy,oSolid1);
                ds_grid_set(grid,floor(xx/16),floor(yy/16),1);
                ds_grid_set(cnsl,floor(xx/16),floor(yy/16),0);
            break;
            case 1: // slope 1
                instance_create(xx,yy,oSlope1);
                ds_grid_set(grid,floor(xx/16),floor(yy/16),2);
            break;
            case 2: // slope 2
                instance_create(xx,yy,oSlope2);
                ds_grid_set(grid,floor(xx/16),floor(yy/16),3);
            break;
            case 3: // crack block
                instance_create(xx,yy,oBlockStep);
                ds_grid_set(grid,floor(xx/16),floor(yy/16),4);
            break;
            case 4: // beamblock
                instance_create(xx,yy,oBlockShoot);
                ds_grid_set(grid,floor(xx/16),floor(yy/16),4);
            break;
            case 5: // bombblock
                instance_create(xx,yy,oBlockBomb);
                ds_grid_set(grid,floor(xx/16),floor(yy/16),4);
            break;
            case 6: // missileblock
                instance_create(xx,yy,oBlockMissile);
                ds_grid_set(grid,floor(xx/16),floor(yy/16),4);
            break;
            case 7: // superblock
                instance_create(xx,yy,oBlockSMissile);
                ds_grid_set(grid,floor(xx/16),floor(yy/16),4);
            break;
            case 8: // pbombblock
                instance_create(xx,yy,oBlockPBomb);
                ds_grid_set(grid,floor(xx/16),floor(yy/16),4);
            break;
            case 9: // screwblock
                instance_create(xx,yy,oBlockScrew);
                ds_grid_set(grid,floor(xx/16),floor(yy/16),4);
            break;
            case 10: // speedblock
                instance_create(xx,yy,oBlockSpeed);
                ds_grid_set(grid,floor(xx/16),floor(yy/16),4);
            break;
            case 25: // crack block
                with (instance_create(xx,yy,oBlockStep)){
                    regentime = -1;
                }
                ds_grid_set(grid,floor(xx/16),floor(yy/16),4);
            break;
            case 26: // beamblock
                with (instance_create(xx,yy,oBlockShoot)){
                    regentime = -1;
                }
                ds_grid_set(grid,floor(xx/16),floor(yy/16),4);
            break;
            case 27: // bombblock
                with (instance_create(xx,yy,oBlockBomb)){
                    regentime = -1;
                }
                ds_grid_set(grid,floor(xx/16),floor(yy/16),4);
            break;
            case 28: // missileblock
                with (instance_create(xx,yy,oBlockMissile)){
                    regentime = -1;
                }
                ds_grid_set(grid,floor(xx/16),floor(yy/16),4);
            break;
            case 29: // superblock
                with (instance_create(xx,yy,oBlockSMissile)){
                    regentime = -1;
                }
                ds_grid_set(grid,floor(xx/16),floor(yy/16),4);
            break;
            case 30: // pbombblock
                with (instance_create(xx,yy,oBlockPBomb)){
                    regentime = -1;
                }
                ds_grid_set(grid,floor(xx/16),floor(yy/16),4);
            break;
            case 31: // screwblock
                with instance_create(xx,yy,oBlockScrew){
                    regentime = -1;
                }
                ds_grid_set(grid,floor(xx/16),floor(yy/16),4);
            break;
            case 32: // speedblock
                with instance_create(xx,yy,oBlockSpeed){
                    regentime = -1;
                }
                ds_grid_set(grid,floor(xx/16),floor(yy/16),4);
            break;
            case 11: // spawn. also for filling grid
                x = xx+8;
                y = yy+16;
                var s_x = x;
                var s_y = y-8;
            break;
            case 12: // FREEDOM
                instance_create(xx,yy,oTrialGoal);
            break;
            case 13: // spikes
                with (instance_create(xx+2,yy+2,oSpikes4)){
                    image_xscale = 0.75;
                    image_yscale = 0.75;
                }
                ds_grid_set(grid,floor(xx/16),floor(yy/16),5);
            break;
            case 40:
                instance_create(xx,yy,oTTWater);
            break;
            // items
            case 14: // spiderball
                instance_create(xx,yy+16,oTTSpider);
            break;
            case 15: // jumpball
                instance_create(xx,yy+16,oTTSpring);
            break;
            case 16: // hijump
                instance_create(xx,yy+16,oTTHijump);
            break;
            case 17: // spacejump
                instance_create(xx,yy+16,oTTSpace);
            break;
            case 18: // bombs
                instance_create(xx,yy+16,oTTBomb);
            break;
            case 19: // missile
                instance_create(xx,yy+16,oTTMissile);
            break;
            case 20: // super
                instance_create(xx,yy+16,oTTSuper);
            break;
            case 21: // power
                instance_create(xx,yy+16,oTTPower);
            break;
            case 22: // screw
                instance_create(xx,yy+16,oTTScrew);
            break;
            case 23: // speed
                instance_create(xx,yy+16,oTTBooster);
            break;
            case 34: // morph
                instance_create(xx,yy+16,oTTMorph);
            break;
            case 35: // pgrip
                instance_create(xx,yy+16,oTTPGrip);
            break;
            case 24: // heal
                instance_create(xx,yy,oTTHealField);
            break;
            case 33: // ammo
                instance_create(xx,yy,oTTAmmoField);
            break;
            case 36: // etank
                instance_create(xx,yy+16,oTTEnergy);
            break;
            case 37: // charge
                instance_create(xx,yy+16,oTTCBeam);
            break;
            case 38: // wave
                instance_create(xx,yy+16,oTTWBeam);
            break;
            case 39: // spazer
                instance_create(xx,yy+16,oTTSBeam);
            break;
            case 41: // gravity
                instance_create(xx,yy+16,oTTGravSuit);
            break;
        }
    }
}

// solid merging code
if (consolidate){
    while (1){
        for (var i = 0; i &lt; 240; ++i;){
            for (var v = 0; v &lt; 190; ++v;){
                if (ds_grid_get(cnsl,i,v) != -1){
                    // x check
                    var x_o = 0;
                    if (i == 0){
                        x_o = 1;
                    }else{
                        if (ds_grid_get(cnsl,i-1,v) == -1) then x_o = 1;
                    }
                    // y check
                    var y_o = 0;
                    if (v == 0){
                        y_o = 1;
                    }else{
                        if (ds_grid_get(cnsl,i,v-1) == -1) then y_o = 1;
                    }
                    if (x_o &amp;&amp; y_o){
                        var widt = 1;
                        var hegt = 1;
                        if (ds_grid_get_l(cnsl,i+1,v) != -1){ // horizontal and vertical
                            // first check
                            while (ds_grid_get_l(cnsl,i+widt,v) != -1){
                                ++widt;
                            }
                            // second check
                            while (ds_grid_get_l(cnsl,i,v+hegt) != -1){
                                var temp_widt = 1;
                                while (ds_grid_get_l(cnsl,i+temp_widt,v+hegt) != -1){
                                    ++temp_widt;
                                }
                                if (temp_widt == widt){ // equal, continue on
                                    ++hegt;
                                    continue;
                                }else{ // not equal, probably lopsided
                                    break;
                                }
                            }
                            // final results
                            ds_grid_set_region(cnsl,i,v,i+(widt-1),v+(hegt-1),-1);
                            with (instance_create(i*16,v*16,oSolid1)){
                                image_xscale = widt;
                                image_yscale = hegt;
                            }
                        }else if (ds_grid_get_l(cnsl,i,v+1) != -1){ // vertical only
                            // check
                            while (ds_grid_get_l(cnsl,i,v+hegt) != -1){
                                ++hegt;
                            }
                            // final results
                            ds_grid_set_region(cnsl,i,v,i+(widt-1),v+(hegt-1),-1);
                            with (instance_create(i*16,v*16,oSolid1)){
                                image_xscale = widt;
                                image_yscale = hegt;
                            }
                        }else{ // no meeting blocks
                            ds_grid_set(cnsl,i,v,-1);
                            instance_create(i*16,v*16,oSolid1);
                        }
                        continue; // all done, start another loop
                    }
                }
            }
        }
        // for loops are clear, so there must be no more merging to do!
        break; // FREEDOM
    }
}
ds_grid_destroy(cnsl);

// now make visuals off of the grid
for (var i = 0; i &lt; 240; ++i;){
    for (var v = 0; v &lt; 190; ++v;){
        switch (ds_grid_get(grid,i,v)){
            case 1:
                tile_add(tlTimeTrial,0,0,16,16,i*16,v*16,-100);
            break;
            case 2:
                tile_add(tlTimeTrial,32,0,16,16,i*16,v*16,-100);
            break;
            case 3:
                tile_add(tlTimeTrial,48,0,16,16,i*16,v*16,-100);
            break;
            case 4:
                if (hdn){ // only make block sprites if hdn isn't false
                    tile_add(tlTimeTrial,16,0,16,16,i*16,v*16,-122);
                }
            break;
            case 5: // spikes
                var place = 0;
                // messy code.. but it works
                if (ds_grid_get(grid,i,v-1) == 1){
                    place = 2; // place on ceiling
                }
                if (ds_grid_get(grid,i,v+1) == 1){
                    place = 1; // place on floor
                }
                if (ds_grid_get(grid,i+1,v) != 5 &amp;&amp; ds_grid_get(grid,i-1,v) != 5){
                // don't perform wall checks if there are spikes on the sides, otherwise..
                    if (ds_grid_get(grid,i-1,v) == 1){
                        place = 3; // place on left wall
                    }
                    if (ds_grid_get(grid,i+1,v) == 1){
                        place = 4; // place on right wall
                    }
                }
                switch (place){
                    case 2:
                        tile_add(tlTimeTrial,32,16,16,16,i*16,v*16,-122);
                    break;
                    case 3:
                        tile_add(tlTimeTrial,16,16,16,16,i*16,v*16,-122);
                    break;
                    case 4:
                        tile_add(tlTimeTrial,48,16,16,16,i*16,v*16,-122);
                    break;
                    default:
                        tile_add(tlTimeTrial,0,16,16,16,i*16,v*16,-122);
                    break;
                }
            break;
        }
    }
}
// kill the grid because memory leaks are bad
ds_grid_destroy(grid);
// and kill the file because i didn't do that apparently..?
file_text_close(file);

// finally, create demo record/playback
instance_create(0,0,oDemoRecord);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>goal_trial();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>oCharacter.x = x;
oCharacter.y = y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (timer_started == 1){
   timer += 1;
}

if (timer_started == 0) &amp;&amp; !(oCharacter.state == 33){
   mus_stop_all();
   mus_loop(musTrialsPlay);
   timer_started = 1;
}

/* this was debug code for screenshots
if (keyboard_check(vk_alt)){
      room_speed = 6;
}else{
      room_speed = 60;
}
*/

// slow down time before transitioning to the next screen once the course is complete
if (timer_started == -1){
   room_speed -= 1;
   if (room_speed &lt; 15){
      room_speed = 60;
      goal_trial();
   }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
